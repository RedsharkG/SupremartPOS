<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>